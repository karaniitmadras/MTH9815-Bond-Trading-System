/**
 * bondstreamingservice.hpp
 * 
 * This file defines the BondStreamingService for a bond trading system. It includes:
 * - 'BondStreamingService': A service that extends StreamingService for bonds, handling the publication of price streams.
 * - 'BondAlgoStreamServiceListener': A listener for the BondAlgoStreamingService, responsible for processing AlgoStream data and updating the BondStreamingService.
 *
 * The primary function of this service is to publish price streams generated by the BondAlgoStreamingService to all its listeners, ensuring the timely dissemination of price information in the bond trading system.
 */


#ifndef BOND_STREAMING_SERVICE_HPP
#define BOND_STREAMING_SERVICE_HPP

#include "bondalgostreamingservice.hpp"
#include "soa.hpp"
#include "products.hpp"
#include "streamingservice.hpp"

class BondStreamingService : public StreamingService<Bond> {
public:
    BondStreamingService() {}
    void OnMessage(PriceStream<Bond>& data) override {
        // Do nothing. Since this service does not have a connector.
    }

    /**
     * Publishes a price stream to all listeners.
     * @param priceStream
     */
    void PublishPrice(const PriceStream<Bond>& priceStream) override {
        dataStore.insert(make_pair(priceStream.GetProduct().GetProductId(), priceStream));
        if (dataStore.find(priceStream.GetProduct().GetProductId()) == dataStore.end()) {
            for (auto listener : this->GetListeners()) {
                listener->ProcessAdd(const_cast<PriceStream<Bond> &>(priceStream));
            }
        }
        else {
            for (auto listener : this->GetListeners()) {
                listener->ProcessUpdate(const_cast<PriceStream<Bond> &>(priceStream));
            }
        }
    }
};

class BondAlgoStreamServiceListener : public ServiceListener<AlgoStream<Bond>> {
public:
    explicit BondAlgoStreamServiceListener(BondStreamingService* listeningService) : listeningService(listeningService) {}

    void ProcessAdd(AlgoStream<Bond>& data) override {
        listeningService->PublishPrice(data.getPriceStream());
    }
    void ProcessRemove(AlgoStream<Bond>& data) override {

    }
    void ProcessUpdate(AlgoStream<Bond>& data) override {
        listeningService->PublishPrice(data.getPriceStream());
    }

private:
    BondStreamingService* listeningService;

};
#endif //BOND_STREAMING_SERVICE_HPP